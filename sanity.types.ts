/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type ContactPerson = {
  _id: string;
  _type: "contactPerson";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  email?: string;
  designation?: string;
  phone?: string;
  clients?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "client";
  }>;
};

export type Client = {
  _id: string;
  _type: "client";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  projects?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  priority?: "noPriority" | "urgent" | "high" | "medium" | "low";
  startDate?: string;
  endDate?: string;
  clients?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "client";
  }>;
  contactPersons?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "contactPerson";
  }>;
  stagesCompleted?: Array<string>;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
  | ContactPerson
  | Client
  | Project;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/clients/getAllClients.ts
// Variable: ALL_CLIENTS_QUERY
// Query: *[_type == "client"] {            _id,             name,        }
export type ALL_CLIENTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
}>;

// Source: ./src/sanity/lib/clients/getAllContacts.ts
// Variable: ALL_CONTACTS_QUERY
// Query: *[_type == "contactPerson"] {            _id,             name,            email,            designation,            phone,            clients[]->{              _id,            },        }
export type ALL_CONTACTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  email: string | null;
  designation: string | null;
  phone: string | null;
  clients: Array<{
    _id: string;
  }> | null;
}>;

// Source: ./src/sanity/lib/projects/getAllProjects.ts
// Variable: ALL_PROJECTS_QUERY
// Query: *[_type == "project"] {          _id,          name,          startDate,           endDate,           stagesCompleted,           clients[]->{            _id,             name,          }        }
export type ALL_PROJECTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  startDate: string | null;
  endDate: string | null;
  stagesCompleted: Array<string> | null;
  clients: Array<{
    _id: string;
    name: string | null;
  }> | null;
}>;

// Source: ./src/sanity/lib/projects/getProjectById.ts
// Variable: PROJECT_BY_ID_QUERY
// Query: *[_type == "project" && _id == $projectId] {          _id,          name,           startDate,           endDate,           stagesCompleted,           contactPersons[]->{            _id,            name,            email,            phone,            designation,            clients[]->{              _id,            },          },          clients[]->{            _id,             name,          }        }
export type PROJECT_BY_ID_QUERYResult = Array<{
  _id: string;
  name: string | null;
  startDate: string | null;
  endDate: string | null;
  stagesCompleted: Array<string> | null;
  contactPersons: Array<{
    _id: string;
    name: string | null;
    email: string | null;
    phone: string | null;
    designation: string | null;
    clients: Array<{
      _id: string;
    }> | null;
  }> | null;
  clients: Array<{
    _id: string;
    name: string | null;
  }> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '\n        *[_type == "client"] {\n            _id, \n            name,\n        }\n  ': ALL_CLIENTS_QUERYResult;
    '\n        *[_type == "contactPerson"] {\n            _id, \n            name,\n            email,\n            designation,\n            phone,\n            clients[]->{\n              _id,\n            },\n\n        }\n  ': ALL_CONTACTS_QUERYResult;
    '\n        *[_type == "project"] {\n          _id,\n          name,\n          startDate, \n          endDate, \n          stagesCompleted, \n          clients[]->{\n            _id, \n            name,\n          }\n        }\n  ': ALL_PROJECTS_QUERYResult;
    '\n        *[_type == "project" && _id == $projectId] {\n          _id,\n          name, \n          startDate, \n          endDate, \n          stagesCompleted, \n          contactPersons[]->{\n            _id,\n            name,\n            email,\n            phone,\n            designation,\n            clients[]->{\n              _id,\n            },\n          },\n          clients[]->{\n            _id, \n            name,\n          }\n        }\n  ': PROJECT_BY_ID_QUERYResult;
  }
}
